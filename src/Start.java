import io.audio.AudioStuff;

import java.io.IOException;

import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.LineUnavailableException;

import DataTypes.ByteConventions;
import Formating.Strings;
import Text.Fonting;
import Text.Fonting.Syms;

public class Start extends Thread {

	/*
	 * { "00000000", "00000000", "00000000", "00000000", "00000000", "00000000",
	 * "00000000", "00000000"}
	 */

	public static void main(String args[]) throws IOException,
			LineUnavailableException {
		testFontSaving();
		testFontLoading();
	}

	private static void testFontSaving() {

		String[][] chars = new String[][] {
				{ "00111100", "01000010", "10000101", "10001001", "10010001", //0
						"10100001", "01000010", "00111100" }

				,
				{ "00011000", "00111000", "01001000", "00001000", "00001000", //1
						"00001000", "00001000", "00111100" },

				{ "00111000", "01000100", "10000010", "00000001", "00000010", //2
						"00001100", "00110000", "11111111" },

				{ "11111111", "00000010", "00000001", "00011110", "00000001", //3
						"10000010", "01000100", "00111000" },

				{ "00001000", "00011000", "00101000", "01001000", "10001000", //4
						"11111111", "00001000", "00001000" },
									
				{ "11111111", "10000000", "10000000", "10111100", "11000010", //5
						"00000001", "01000010", "00111100" },
				
				{ "00111100",                                                 //6 
				  "01000010",
				  "10000001",
				  "10111100",
				  "11000010",
				  "10000001",		  
				  "01000010",
				  "00111100"},		
				

				{ "11111111", "00000001", "00000010", "00000010", "00000100", //7
						"00000100", "00001000", "00001000" },

				{ "00111100", "01000010", "10000001", "01000010", "00111100", //8
						"01000010", "10000001", "01111110" },

				{ "00111100", "01000010", "10000001", "01000011", "00111101", //9
						"10000001", "01000010", "00111100" },

				{ "00011000", "00111100", "01100110", "11000011", "11111111", //A
						"11000011", "11000011", "11000011" },

				{ "00000000", "00000000", "01111100", "10000010", "00111101", //a
						"01000011", "10000011", "01111101" },

				{ "11111100", "11000110", "11000011", "11111110", "11000110", //B
						"11000011", "11000110", "11111100" },

				{ "10000000", "10000000", "10000000", "10111100", "11000010", //b
						"10000001", "11000010", "10111100" },

				{ "00111110", "01100011", "11000000", "11000000", "11000000", //C
						"11000000", "01100011", "00111110" },

				{ "00000000", "00000000", "00111110", "01000001", "10000000", //c
						"10000000", "01000001", "00111110" },

				{ "11110000", "11001100", "11000011", "11000011", "11000011", //D
						"11000011", "11001100", "11110000" },
				{ "00000001", "00000001", "00000001", "00111101", "01000011", //d
						"10000001", "01000011", "00111101" },

				{ "11111111", "11000011", "11000000", "11000011", "11111111", //E
						"11000000", "11000011", "11111111" },
						
				{ "00000000", "00000000", "00000000", "00111100", "01000010", //e
						"10111100", "10000001", "01111110" },

				{ "11111111", "11000000", "11000000", "11000000", "11111000", //F
						"11000000", "11000000", "11000000" },
						
				{ "00111000", 
				  "01000100",
				  "10000010", 
				  "10000000", 
				  "11110000", //f
				  "10000000", 
				  "10000000", 
				  "10000000" },
				
				
						
				{ "00111111", 
				  "01100011",
				  "11000000",
				  "11001111",
				  "11000011",
				  "11000011",
				  "01100110",
				  "00111100" },
				  
				 { 
					 "00000000", "00111100", "01000010", "01111100", "01000000", //g
					 "01011100", "01100010", "00111100"},

				{ "10000001",
				  "10000001",
				  "10000001",
				  "10000001",
				  "11111111",
				  "10000001", 
				  "10000001", 
				  "10000001", 
				  "10000001" },
				  
				{ "10000000",
				  "10000000",
				  "10000000",
				  "10000000",
				  "11111100",
				  "10000010", 
				  "10000001", 
				  "10000001", 
				  "10000001" },

				{ "11111111", "00011000", "00011000", "00011000", "00011000",
						"00011000", "00011000", "11111111" },
				{ "00010000", "00101000", "00010000", "00000000", "00010000",
						"00010000", "00010000", "00010000" },

				{ "11111111", "00000011", "00000011", "00000011", "00000011",
						"11000011", "01100110", "00111100" },

				{ "00000011", "00000011", "00000000", "00111111", "00000001",
						"00100001", "00010010", "00001100", },

				{ "11000111", "11001100", "11011000", "11110000", "11111000",
						"11011000", "11001100", "11000110" },

				{ "10000100", "10001000", "10010000", "10100000", "11100000",
						"10010000", "10001000", "10000100" },

				{ "11000000", "11000000", "11000000", "11000000", "11000000",
						"11000000", "11000000", "11111111" },

				{ "00111000", "00001000", "00001000", "00001000", "00001000",
						"00001000", "00001000", "00111110" },

				{ "11000011", "11100111", "11111111", "11011011", "11000011",
						"11000011", "11000011", "11000011" },
				{ "00000000", "00000000", "00000000", "10100100", "11011010",
						"10011001", "10011001", "10011001" },

				{ "11000011", "11100011", "11110011", "11011011", "11001111",
						"11000111", "11000011", "11000011" },

				{ "00000000", "00000000", "00000000", "00000000", "10111100",
						"11000010", "10000001", "10000001" },

				{ "00111100", "01100110", "11000011", "11000011", "11000011",
						"11000011", "01100110", "00111100" },

				{ "00000000", "00000000", "00111100", "01000010", "10000001",
						"10000001", "01000010", "00111100" },

				{ "11111100", "11000010", "11000010", "11111100", "11000000",
						"11000000", "11000000", "11000000" },

				{

				"00000000", "00000000", "11100000", "10010000", "11100000",
						"10000000", "10000000", "10000000" },

				{ "00011000", "00111100", "11000011", "11000011", "11000011",
						"11000011", "00111110", "00011011" },

				{ "00000000", "00000000", "00000111", "00001001", "00000111",
						"00000001", "00000001", "00000001" },

				{ "11111100", "11000110", "11000011", "11111100", "11011000",
						"11001100", "11000110", "11000011" },

				{ "00000000", "00000000", "00000000", "10111100", "11000010",
						"10000000", "10000000", "10000000" },

				{ "00111100", "01100110", "11000011", "00110000", "00001100",
						"11000011", "01100110", "00111100" },

				{ "00000000", "00000000", "00011000", "00100100", "00010000",
						"00001000", "00100100", "00011000" },

				{ "11111111", "00011000", "00011000", "00011000", "00011000",
						"00011000", "00011000", "00011000" },

				{ "10000000", "10000000", "11111000", "10000000", "10000000",
						"10000001", "01000010", "00111100" },

				{ "11000011", "11000011", "11000011", "11000011", "11000011",
						"11000011", "01100110", "00111100" },

				{ "00000000", "00000000", "00000000", "00000000", "10000001",
						"10000001", "01000011", "00111101" },

				{ "11000011", "11000011", "11000011", "11000011", "11000011",
						"01100110", "00111100", "00011000" },

				{ "00000000", "00000000", "00000000", "00000000", "10000001",
						"01000010", "00100100", "00011000" },

				{ "11000011", "11000011", "11011011", "11011011", "11011011",
						"11011011", "11111111", "01100110" },

				{ "00000000", "00000000", "00000000", "00000000", "10000010",
						"10010010", "01010100", "00101000" },

				{ "11000001", "01100011", "00110110", "00011100", "00011100",
						"00110110", "01100011", "11000001" },

				{ "00000000", "00000000", "00000000", "10001000", "01010000",
						"00100000", "01010000", "10001000" },

				{ "11000011", "01100110", "00111100", "00011000", "00011000",
						"00011000", "00011000", "00011000" },

				{ "00000000", "00000000", "00000000", "00100010", "00010100",
						"00001000", "00001000", "00001000" },

				{ "11111111", "00000011", "00000110", "00001100", "00011000",
						"00110000", "01100000", "11111111" },

				{ "00000000", "00000000", "00000000", "11111111", "00000011",
						"00001100", "00110000", "11111111" } };

		Fonting.Syms tt = Fonting.createNewFont(8, 8, chars);
		tt.save("Basic");

	}

	private static void testFontLoading() {

		String[] q = Fonting
				.getCreatedFonts("C:/Users/DGmoN/Dropbox/Programming stuff/Utils/");
		for (String e : q) {
			System.out.println(e);
		}

		Syms test = Fonting
				.LoadFont("C:/Users/DGmoN/Dropbox/Programming stuff/Utils/Basic");
		for (int x = 0; x < test.getCharIndex(); x++) {
			byte[] a = test.getCharData(x);
			System.out.println(x);
			for (byte s : a) {
				String temp = ByteConventions.toBinaryString(s);

				System.out.println(temp);
			}
			System.out.println();
		}
	}

	private static void testAudio() {
		AudioStuff.init();
		byte[] data;
		AudioInputStream s = null;
		try {
			s = AudioStuff.getMicStream(2);
			while (true) {
				if (s.available() > 0) {
					data = new byte[16];
					s.read(data);
					System.out.println("Read: "
							+ ByteConventions.bytesToHexes(data));
				}

			}
		} catch (Exception e) { // TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

	@Override
	public void run() {
		while (true) {
			try {
				sleep(1000);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}

}
